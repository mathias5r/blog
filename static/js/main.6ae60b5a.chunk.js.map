{"version":3,"sources":["assets/imgs/profile.png","helpers/diagonalViewStyles.ts","components/HeaderPost/presentations/HeaderPostView.tsx","components/HeaderPost/containers/HeaderPostContainer.tsx","components/TimelinePost/presentations/TimelinePostView.tsx","components/TimelinePost/containers/TimelinePostContainer.tsx","components/Profile/presentations/ProfileView.tsx","components/Profile/containers/ProfileContainer.tsx","components/App/presentations/AppView.tsx","components/App/containers/AppContainer.tsx","serviceWorker.ts","index.tsx"],"names":["module","exports","degrees","css","Container","styled","div","isMouseOver","Background","img","diagonalViewStyles","Content","Title","h1","Text","h4","HeaderPostView","props","id","backgroundImage","src","HeaderPostContainer","index","mousesOver$","setMousesOver$","useEffect","fromEvent","document","getElementById","pipe","map","image","TimelinePost","TimelinePostContainer","TimelinePostView","Info","Profile","ProfileImage","Name","h3","ProfileView","profileImage","profileConfig","name","ProfileContainer","Header","HeaderPosts","TimelinePosts","images","AppView","itemUnderMouse","key","toString","AppContainer","useState","undefined","setItemUnderMouse","posts$","merge$","merge","debounceTime","subscribe","unsubscribe","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.6ae60b5a.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/profile.8323afe7.png\";","/* eslint-disable @typescript-eslint/no-explicit-any */\nimport { css } from 'styled-components';\n\nexport default (degrees = 0): any => css`\n-webkit-transform: skewX(${degrees}deg);\n-moz-transform: skewX(${degrees}deg);\t\n-ms-transform: skewX(${degrees}deg);\t\n-o-transform: skewX(${degrees}deg);\ntransform: skewX(${degrees}deg);\n`","import React from 'react';\nimport styled from 'styled-components';\n\nimport diagonalViewStyles from 'helpers/diagonalViewStyles';\n\nimport { text1Regular } from 'text/text1';\n\ninterface PostProps {\n  id: string;\n  backgroundImage: string;\n  isMouseOver: boolean;\n}\n\nconst Container = styled.div<{ isMouseOver: boolean }>`\n  flex: ${({ isMouseOver }): number => (isMouseOver ? 0.6 : 0.25)};\n  overflow: hidden;\n  position: relative;\n  transition-property: flex;\n  transition: all 500ms ease-in-out;\n`;\n\nconst Background = styled.img<{ isMouseOver: boolean }>`\n  ${diagonalViewStyles(20)};\n  height: 100vh;\n  min-height: 800px;\n  left: -100%;\n  opacity: ${({ isMouseOver }): number => (isMouseOver ? 0.3 : 1)};\n  position: absolute;\n  transition-property: opacity;\n  z-index: 1;\n  transition: all 500ms ease-in-out;\n\n  @media only screen and (max-width: 1200px) {\n    ${diagonalViewStyles(0)};\n    left: 0;\n    max-width: 100%;\n    min-height: 500px;\n    min-width: 600px;\n    height: auto;\n    opacity: 0.5;\n  }\n`;\n\nconst Content = styled.div`\n  ${diagonalViewStyles(20)};\n  height: 100vh;\n  position: absolute;\n  width: 100%;\n  z-index: 2;\n  display: flex;\n  flex-direction: column;\n  justify-content: center;\n  align-items: center;\n\n  @media only screen and (max-width: 1200px) {\n    ${diagonalViewStyles(0)};\n  }\n`;\n\nconst Title = styled.h1<{ isMouseOver: boolean }>`\n  color: white;\n  opacity: ${({ isMouseOver }): number => (isMouseOver ? 1 : 0)};\n  transition-property: opacity;\n  transition: all 500ms ease-in-out;\n`;\n\nconst Text = styled.h4<{ isMouseOver: boolean }>`\n  color: white;\n  width: 300px;\n  opacity: ${({ isMouseOver }): number => (isMouseOver ? 1 : 0)};\n  transition-property: opacity;\n  transition: all 500ms ease-in-out;\n  text-align: center;\n`;\n\nconst HeaderPostView = (props: PostProps): JSX.Element => {\n  const { id, backgroundImage, isMouseOver } = props;\n\n  return (\n    <Container {...{ id, isMouseOver }}>\n      <Content>\n        <Title {...{ isMouseOver }}>Title</Title>\n        <Text {...{ isMouseOver }}>\n          Lorem ipsum dolor sit amet consectetur adipisicing elit. Nisi, ratione\n          vitae ipsam quidem delectus, laudantium magni animi molestias illum,\n          cum nam? Voluptate nesciunt sunt delectus totam veritatis, asperiores\n          quaerat vitae!\n        </Text>\n      </Content>\n      <Background isMouseOver={isMouseOver} src={backgroundImage} />\n    </Container>\n  );\n};\n\nexport default HeaderPostView;\n","import React, { useEffect } from 'react';\n\nimport { Observable, fromEvent } from 'rxjs';\nimport { map } from 'rxjs/operators';\nimport { FromEventTarget } from 'rxjs/internal/observable/fromEvent';\n\nimport HeaderPostView from '../presentations/HeaderPostView';\n\ninterface HeaderPostContainerProps {\n  index: number;\n  backgroundImage: string;\n  isMouseOver: boolean;\n  mousesOver$: Observable<any>[];\n  setMousesOver$: ($: Observable<any>[]) => void;\n}\n\nconst HeaderPostContainer = (props: HeaderPostContainerProps): JSX.Element => {\n  const { index, backgroundImage, isMouseOver, mousesOver$, setMousesOver$ } = props;\n\n  const id = `post${index}`;\n\n  useEffect(() => {\n    mousesOver$[index] = fromEvent(\n      document.getElementById(id) as FromEventTarget<Event>,\n      'mouseenter',\n    ).pipe(map(() => index));\n    setMousesOver$([...mousesOver$]);\n  }, [id]);\n\n  return <HeaderPostView {...{ backgroundImage, id, isMouseOver }}/>\n}\n\nexport default HeaderPostContainer;","import React from 'react';\nimport styled from 'styled-components';\n\ninterface TimelinePostViewProps {\n  image: string;\n}\n\nconst Container = styled.div<{ image: string }>`\n  height: 500px;\n  position: relative;\n  background-color: black;\n\n  &:before {\n    content: '';\n    background-image: url(${(props: any): { image: string } => props.image});\n    background-size: cover;\n    background-position: center;\n    position: absolute;\n    top: 0px;\n    right: 0px;\n    bottom: 0px;\n    left: 0px;\n    opacity: 0.5;\n  }\n`;\n\nconst TimelinePost = (props: TimelinePostViewProps): JSX.Element => {\n  const { image } = props;\n  return (\n    <Container {...{ image }} />\n  )\n}\n\nexport default TimelinePost;","import React from 'react';\n\nimport TimelinePostView from '../presentations/TimelinePostView';\n\ninterface TimelinePostContainerProps {\n  image: string;\n}\n\nconst TimelinePostContainer = (props: TimelinePostContainerProps): JSX.Element => {\n  const { image } = props;\n  return (\n    <TimelinePostView {...{ image }}/>\n  )\n}\n\nexport default TimelinePostContainer;","import React from 'react';\nimport styled from 'styled-components';\n\nimport profileConfig from 'config/profile.json';\nimport profileImage from 'assets/imgs/profile.png';\n\nconst Info = styled.div`\n  display: flex;\n  flex: 1;\n  flex-direction: column;\n  justify-content: center;\n  align-items: center;\n`;\n\nconst Profile = styled.div`\n  width: 300px;\n  height: 300px;\n  border-radius: 150px;\n  background-color: red;\n  overflow: hidden;\n`;\n\nconst ProfileImage = styled.img`\n  width: 300px;\n  height: 300px;\n`;\n\nconst Name = styled.h3`\n  color: white;\n  text-align: center;\n`;\n\nconst ProfileView = (): JSX.Element => (\n  <Info>\n    <Profile>\n      <ProfileImage src={profileImage} />\n    </Profile>\n    <Name>{profileConfig.name}</Name>\n  </Info>\n);\n\nexport default ProfileView;\n","import React from 'react';\n\nimport ProfileView from '../presentations/ProfileView';\n\nconst ProfileContainer = (): JSX.Element => <ProfileView />\n\nexport default ProfileContainer;\n","import React from 'react';\nimport styled from 'styled-components';\n\nimport { Observable } from 'rxjs';\n\nimport diagonalViewStyles from 'helpers/diagonalViewStyles';\n\nimport { HeaderPost } from 'components/HeaderPost';\nimport { TimelinePost } from 'components/TimelinePost';\nimport { Profile } from 'components/Profile';\n\ninterface AppViewProps {\n  itemUnderMouse: number | undefined;\n  mousesOver$: Observable<any>[];\n  setMousesOver$: ($: Observable<any>[]) => void;\n}\n\nconst Header = styled.div`\n  height: 100vh;\n  background-color: black;\n  display: grid;\n  overflow: hidden;\n  padding: 0;\n\n  @media (min-width: 1200px) {\n    grid-template-columns: 1fr 3fr;\n  }\n`;\n\nconst HeaderPosts = styled.div`\n  display: flex;\n  justify-content: flex-end;\n  overflow: hidden;\n  position: relative;\n  padding-left: 100px;\n  background-color: 'blue';\n\n  ${diagonalViewStyles(-20)};\n  @media only screen and (max-width: 1200px) {\n    display: none;\n  }\n`;\n\nconst TimelinePosts = styled.div`\n  display: none;\n  @media only screen and (max-width: 1200px) {\n    display: block;\n  }\n`;\n\nconst images = [\n  'https://images.unsplash.com/photo-1593642532842-98d0fd5ebc1a?ixlib=rb-1.2.1&ixid=eyJhcHBfaWQiOjEyMDd9&auto=format&fit=crop&w=1350&q=80',\n  'https://images.unsplash.com/photo-1516979187457-637abb4f9353?ixlib=rb-1.2.1&ixid=eyJhcHBfaWQiOjEyMDd9&auto=format&fit=crop&w=1350&q=80',\n  'https://images.unsplash.com/photo-1498050108023-c5249f4df085?ixlib=rb-1.2.1&ixid=eyJhcHBfaWQiOjEyMDd9&auto=format&fit=crop&w=1352&q=80',\n  'https://images.unsplash.com/photo-1534972195531-d756b9bfa9f2?ixlib=rb-1.2.1&ixid=eyJhcHBfaWQiOjEyMDd9&auto=format&fit=crop&w=1350&q=80',\n];\n\nconst AppView = (props: AppViewProps): JSX.Element => {\n  const { itemUnderMouse, mousesOver$, setMousesOver$ } = props;\n\n  return (\n    <>\n      <Header>\n        <Profile />\n        <HeaderPosts id=\"posts\">\n          {images.map((image, index) => (\n            <HeaderPost\n              backgroundImage={image}\n              isMouseOver={itemUnderMouse === index}\n              key={index.toString()}\n              {...{ index, mousesOver$, setMousesOver$ }}\n            />\n          ))}\n        </HeaderPosts>\n      </Header>\n      <TimelinePosts>\n        {images.map((image, index) => (\n          <TimelinePost key={index.toString()} image={image} />\n        ))}\n      </TimelinePosts>\n    </>\n  );\n};\n\nexport default AppView;\n","import React, { useEffect, useState } from 'react';\n\nimport { Observable, fromEvent, merge } from 'rxjs';\nimport { debounceTime, map } from 'rxjs/operators';\nimport { FromEventTarget } from 'rxjs/internal/observable/fromEvent';\n\nimport AppView from '../presentations/AppView';\n\nconst AppContainer = (): JSX.Element => {\n  const [mousesOver$, setMousesOver$] = useState([] as Observable<any>[]);\n  const [itemUnderMouse, setItemUnderMouse] = useState(undefined);\n\n  useEffect(() => {\n    const posts$ = fromEvent(\n      document.getElementById('posts') as FromEventTarget<Event>,\n      'mouseleave'\n    ).pipe(map(() => undefined));\n\n    const merge$ = merge(...mousesOver$, posts$)\n      .pipe(debounceTime(200))\n      .subscribe((index) => setItemUnderMouse(index));\n\n    return (): void => {\n      merge$.unsubscribe();\n    };\n  }, [mousesOver$]);\n\n  return <AppView {...{ itemUnderMouse, mousesOver$, setMousesOver$ }} />;\n};\n\nexport default AppContainer;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport { App } from './components/App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}