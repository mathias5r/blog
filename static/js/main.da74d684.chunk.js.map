{"version":3,"sources":["15868862.png","components/Post.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["module","exports","DiagonalStyles","degrees","css","Container","styled","div","isMouseOver","Background","img","Content","Title","h1","Text","h4","Post","props","id","backgroundImage","useState","setIsMouseOver","useEffect","mouseOver","fromEvent","document","getElementById","pipe","debounceTime","subscribe","mouseOut","unsubscribe","src","Posts","Info","Profile","ProfileImage","Name","h3","images","App","profileImage","map","image","index","key","toString","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"gFAAAA,EAAOC,QAAU,IAA0B,sC,g+CCY3C,IAAMC,EAAiB,eAACC,EAAD,uDAAW,EAAX,OAAsBC,YAArB,IACKD,EACHA,EACDA,EACDA,EACHA,IAGfE,EAAYC,IAAOC,IAAV,KACL,qBAAGC,YAAwC,GAAM,MAMvDN,GAAgB,KAGdO,EAAaH,IAAOI,IAAV,IACZR,EAAe,KAGN,qBAAGM,YAAwC,GAAK,KAOvDG,EAAUL,IAAOC,IAAV,IACTL,EAAe,KAWbU,EAAQN,IAAOO,GAAV,KAEE,qBAAGL,YAAwC,EAAI,KAKtDM,EAAOR,IAAOS,GAAV,KAGG,qBAAGP,YAAwC,EAAI,KAsC7CQ,EAhCF,SAACC,GAAmC,IAErCC,EAAwBD,EAAxBC,GAAIC,EAAoBF,EAApBE,gBAFgC,EAINC,oBAAS,GAJH,mBAIrCZ,EAJqC,KAIxBa,EAJwB,KAqB5C,OAfAC,qBAAU,WACR,IAAMC,EAAYC,YAAUC,SAASC,eAAeR,GAA+B,aAChFS,KAAKC,YAAa,MAClBC,WAAU,kBAAMR,GAAe,MAE5BS,EAAWN,YAAUC,SAASC,eAAeR,GAA+B,YAC/ES,KAAKC,YAAa,MAClBC,WAAU,kBAAMR,GAAe,MAElC,OAAO,WACLE,EAAUQ,cACVD,EAASC,iBAEV,CAACb,IAGA,kBAACb,EAAc,CAAEa,KAAIV,eACnB,kBAACG,EAAD,KACE,kBAACC,EAAU,CAAEJ,eAAb,SACA,kBAACM,EAAS,CAAEN,eAAZ,qOAEF,kBAACC,EAAD,CAAYD,YAAaA,EAAawB,IAAKb,M,09BCxFrD,IAAMd,EAAYC,IAAOC,IAAV,KAST0B,EAAQ3B,IAAOC,IAAV,KASL2B,EAAO5B,IAAOC,IAAV,KAQJ4B,EAAU7B,IAAOC,IAAV,KAQP6B,EAAe9B,IAAOI,IAAV,KAKZ2B,EAAO/B,IAAOgC,GAAV,KAKJC,EAAS,CACb,yIACA,yIACA,yIACA,0IAoBaC,EAjBH,WAEV,OACE,kBAAC,EAAD,KACE,kBAACN,EAAD,KACE,kBAACC,EAAD,KACE,kBAACC,EAAD,CAAcJ,IAAKS,OAErB,kBAACJ,EAAD,+BAEF,kBAACJ,EAAD,KACGM,EAAOG,KAAI,SAACC,EAAOC,GAAR,OAAkB,kBAAC,EAAD,CAAMC,IAAKD,EAAME,WAAY3B,gBAAiBwB,EAAOzB,GAAE,cAAS0B,WC1DlFG,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEF7B,SAASC,eAAe,SDiIpB,kBAAmB6B,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.da74d684.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/15868862.8323afe7.png\";","/* eslint-disable @typescript-eslint/no-explicit-any */\nimport React, { useEffect, useState } from 'react';\nimport styled, { css } from 'styled-components';\nimport { fromEvent } from 'rxjs';\nimport { debounceTime } from 'rxjs/operators';\nimport { FromEventTarget } from 'rxjs/internal/observable/fromEvent'\n\ninterface PostProps {\n  id: string;\n  backgroundImage: string;\n}\n\nconst DiagonalStyles = (degrees = 0): any => css`\n  -webkit-transform: skewX(${degrees}deg);\n  -moz-transform: skewX(${degrees}deg);\t\n  -ms-transform: skewX(${degrees}deg);\t\n  -o-transform: skewX(${degrees}deg);\n  transform: skewX(${degrees}deg);\n`\n\nconst Container = styled.div<{ isMouseOver: boolean }>`\n  flex: ${({ isMouseOver }): number => isMouseOver ? 0.6 : 0.25 };\n  overflow: hidden;\n  position: relative;\n  transition-property: flex;\n  transition: all 500ms ease-in-out;\n\n  ${DiagonalStyles(-20)};\n`;\n\nconst Background = styled.img<{ isMouseOver: boolean }>`\n  ${DiagonalStyles(20)};\n  height: 100vh;\n  left: -80%;\n  opacity: ${({ isMouseOver }): number => isMouseOver ? 0.3: 1 };\n  position: absolute;\n  transition-property: opacity;\n  z-index: 1;\n  transition: all 500ms ease-in-out;\n`;\n\nconst Content = styled.div`\n  ${DiagonalStyles(20)};\n  height: 100vh;\n  position: absolute;\n  width: 100%;\n  z-index: 2;\n  display: flex;\n  flex-direction: column;\n  justify-content: center;\n  align-items: center;\n`;\n\nconst Title = styled.h1<{ isMouseOver: boolean }>`\n  color: white;\n  opacity: ${({ isMouseOver }): number => isMouseOver ? 1 : 0 };\n  transition-property: opacity;\n  transition: all 500ms ease-in-out;\n`;\n\nconst Text = styled.h4<{ isMouseOver: boolean }>`\n  color: white;\n  width: 300px;\n  opacity: ${({ isMouseOver }): number => isMouseOver ? 1 : 0 };\n  transition-property: opacity;\n  transition: all 500ms ease-in-out;\n  text-align: center;\n`;\n\nconst Post = (props: PostProps): JSX.Element => {\n\n    const { id, backgroundImage } = props;\n\n    const [isMouseOver, setIsMouseOver] = useState(false);\n\n    useEffect(() => {\n      const mouseOver = fromEvent(document.getElementById(id) as FromEventTarget<Event>, 'mouseover')\n        .pipe(debounceTime(200))\n        .subscribe(() => setIsMouseOver(true));\n\n      const mouseOut = fromEvent(document.getElementById(id) as FromEventTarget<Event>, 'mouseout')\n        .pipe(debounceTime(200))\n        .subscribe(() => setIsMouseOver(false));\n\n      return (): void => {\n        mouseOver.unsubscribe();\n        mouseOut.unsubscribe();\n      };\n    }, [id]);\n\n    return ( \n        <Container {...{ id, isMouseOver }}>\n          <Content>\n            <Title {...{ isMouseOver }}>Title</Title>\n            <Text {...{ isMouseOver }}>Lorem ipsum dolor sit amet consectetur adipisicing elit. Nisi, ratione vitae ipsam quidem delectus, laudantium magni animi molestias illum, cum nam? Voluptate nesciunt sunt delectus totam veritatis, asperiores quaerat vitae!</Text>\n          </Content>\n          <Background isMouseOver={isMouseOver} src={backgroundImage} />\n        </Container>\n    )\n}\n\nexport default Post;","import React from 'react';\nimport styled from 'styled-components';\n\nimport Post from './components/Post';\n\n\nimport profileImage from './15868862.png'\n\nconst Container = styled.div`\n  height: 100vh;\n  background-color: black;\n  display: grid;\n  @media(min-width: 1200px){\n    grid-template-columns: 1fr 3fr;\n  }\n`;\n\nconst Posts = styled.div`\n  display: flex;\n  justify-content: flex-end;\n  overflow: hidden;\n  position: relative;\n  padding-left: 200px;\n`;\n\n\nconst Info = styled.div`\n  display: flex;\n  flex: 1;\n  flex-direction: column;\n  justify-content: center;\n  align-items: center;\n`;\n\nconst Profile = styled.div`\n  width: 300px;\n  height: 300px;\n  border-radius: 150px;\n  background-color: red;\n  overflow: hidden;\n`;\n\nconst ProfileImage = styled.img`\n  width: 300px;\n  height: 300px;\n`;\n\nconst Name = styled.h3`\n  color: white;\n  text-align: center;\n`;\n\nconst images = [\n  'https://images.unsplash.com/photo-1593642532842-98d0fd5ebc1a?ixlib=rb-1.2.1&ixid=eyJhcHBfaWQiOjEyMDd9&auto=format&fit=crop&w=1350&q=80',\n  'https://images.unsplash.com/photo-1516979187457-637abb4f9353?ixlib=rb-1.2.1&ixid=eyJhcHBfaWQiOjEyMDd9&auto=format&fit=crop&w=1350&q=80',\n  'https://images.unsplash.com/photo-1498050108023-c5249f4df085?ixlib=rb-1.2.1&ixid=eyJhcHBfaWQiOjEyMDd9&auto=format&fit=crop&w=1352&q=80',\n  'https://images.unsplash.com/photo-1534972195531-d756b9bfa9f2?ixlib=rb-1.2.1&ixid=eyJhcHBfaWQiOjEyMDd9&auto=format&fit=crop&w=1350&q=80'\n];\n\nconst App = (): JSX.Element => {\n\n  return (\n    <Container>\n      <Info>\n        <Profile>\n          <ProfileImage src={profileImage} />\n        </Profile>\n        <Name>Mathias Silva da Rosa</Name>\n      </Info>\n      <Posts>\n        {images.map((image, index) => <Post key={index.toString()} backgroundImage={image} id={`post${index}`} />)}\n      </Posts>\n    </Container>\n  )\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}