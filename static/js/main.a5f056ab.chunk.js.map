{"version":3,"sources":["assets/imgs/profile.png","styles/imageCommonStyles.ts","styles/diagonalViewStyles.ts","helpers/textBehavior.ts","assets/Colors.ts","text/text3/text3Regular.tsx","text/text3/text3Light.tsx","text/text3/text3Bold.tsx","text/text4/text4Regular.tsx","text/text4/text4Bold.tsx","text/text4/text4Light.tsx","components/HeaderPost/presentations/HeaderPostView.tsx","components/HeaderPost/containers/HeaderPostContainer.tsx","components/TimelinePost/hooks/useIntersectionObserver.ts","components/LazyImage/LazyImage.tsx","components/LazyImage/hooks/useLazyImage.ts","components/TimelineImage/TimelineImage.tsx","components/TimelinePost/presentations/TimelinePostView.tsx","components/TimelinePost/containers/TimelinePostContainer.tsx","components/Profile/presentations/ProfileView.tsx","components/Profile/containers/ProfileContainer.tsx","config/posts.js","components/App/presentations/AppView.tsx","components/App/containers/AppContainer.tsx","serviceWorker.ts","index.tsx"],"names":["module","exports","css","degrees","isMouseOver","styled","p","Colors","h1","Container","div","Background","diagonalViewStyles","props","image","Content","Title","text3Bold","textBehavior","Text","text4Light","Link","a","HeaderPostView","id","post","title","intro","url","href","HeaderPostContainer","index","mousesOver$","setMousesOver$","useEffect","fromEvent","document","getElementById","pipe","map","useIntersectionObserver","threshold","onIntersect","observer","IntersectionObserver","target","observe","unobserve","imageCommonStyles","isLoaded","isInViewPort","LazyImage","src","callback","setIsLoaded","img","Image","onload","Thumb","thumb","TimelineImage","children","visible","useState","TimelinePost","TimelinePostContainer","setVisible","setIsInViewPort","entries","isIntersecting","TimelinePostView","Info","Profile","ProfileImage","Name","text4Regular","ProfileView","profileImage","profileConfig","name","profession","git","medium","company","ProfileContainer","process","Header","HeaderPosts","TimelinePosts","AppView","itemUnderMouse","posts","key","toString","AppContainer","undefined","setItemUnderMouse","posts$","merge$","merge","debounceTime","subscribe","unsubscribe","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.a5f056ab.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/profile.8323afe7.png\";","import { css } from 'styled-components';\n\nexport default (): any => css`\n  position: absolute;\n  top: 0px;\n  right: 0px;\n  bottom: 0px;\n  left: 0px;\n  opacity: 1;\n  width: 100%;\n  height: auto;\n`","/* eslint-disable @typescript-eslint/no-explicit-any */\nimport { css } from 'styled-components';\n\nexport default (degrees = 0): any => css`\n  -webkit-transform: skewX(${degrees}deg);\n  -moz-transform: skewX(${degrees}deg);\t\n  -ms-transform: skewX(${degrees}deg);\t\n  -o-transform: skewX(${degrees}deg);\n  transform: skewX(${degrees}deg);\n`","/* eslint-disable @typescript-eslint/no-explicit-any */\nimport { css } from 'styled-components';\n\nexport default (isMouseOver = false): any => css`\n  color: white;\n  opacity: ${isMouseOver ? 1 : 0};\n  text-align: center;\n  transition: opacity 500ms ease-in-out;\n  width: 250px;\n`","export default {\n  BACKGROUND: '#000000',\n  TEXT: '#FFFFFF',\n}","import styled from 'styled-components';\n\nimport Colors from 'assets/Colors';\n\nexport default styled.p`\n  color: ${Colors.TEXT};\n  font-family: \"TitilliumWeb-Regular\";\n  font-size: 1.3rem;\n  letter-spacing: 0;\n  line-height: 1.5;\n\n\n  @media only screen and (max-width: 1500px) {\n    font-size: 1rem;\n  }\n`;\n","import styled from 'styled-components';\n\nimport Colors from 'assets/Colors';\n\nexport default styled.h1`\n  color: ${Colors.TEXT};\n  font-family: \"TitilliumWeb-Light\";\n  font-size: 1.2rem;\n  letter-spacing: 0;\n  line-height: 1.5;\n\n  @media only screen and (max-width: 1500px) {\n    font-size: 1rem;\n  }\n`;\n","import styled from 'styled-components';\n\nimport Colors from 'assets/Colors';\n\nexport default styled.h1`\n  color: ${Colors.TEXT};\n  font-family: \"TitilliumWeb-Bold\";\n  font-size: 1.2rem;\n  letter-spacing: 0;\n  line-height: 1.5;\n\n  @media only screen and (max-width: 1500px) {\n    font-size: 1rem;\n  }\n`;\n","import styled from 'styled-components';\n\nimport Colors from 'assets/Colors';\n\nexport default styled.p`\n  color: ${Colors.TEXT};\n  font-family: \"TitilliumWeb-Regular\";\n  font-size: 1rem;\n  letter-spacing: 0;\n  line-height: 1.5;\n\n  @media only screen and (max-width: 600px) {\n    font-size: 0.9rem;\n  }\n`;\n","import styled from 'styled-components';\n\nimport Colors from 'assets/Colors';\n\nexport default styled.p`\n  color: ${Colors.TEXT};\n  font-family: \"TitilliumWeb-Bold\";\n  font-size: 1rem;\n  letter-spacing: 0;\n  line-height: 1.5;\n\n  @media only screen and (max-width: 600px) {\n    font-size: 0.9rem;\n  }\n`;\n","import styled from 'styled-components';\n\nimport Colors from 'assets/Colors';\n\nexport default styled.p`\n  color: ${Colors.TEXT};\n  font-family: \"TitilliumWeb-Light\";\n  font-size: 1rem;\n  letter-spacing: 0;\n  line-height: 1.5;\n\n  @media only screen and (max-width: 600px) {\n    font-size: 0.9rem;\n  }\n`;","import React from 'react';\nimport styled from 'styled-components';\n\nimport { diagonalViewStyles } from 'styles';\nimport textBehavior from 'helpers/textBehavior';\n\nimport { text3Bold } from 'text/text3';\nimport { text4Light } from 'text/text4';\n\nimport HeaderPostViewProps from '../interfaces/HeaderPostViewProps';\n\nconst Container = styled.div<{ isMouseOver: boolean }>`\n  flex: ${({ isMouseOver }): number => (isMouseOver ? 0.6 : 0.25)};\n  overflow: hidden;\n  position: relative;\n  transition: flex 500ms ease-in-out;\n`;\n\nconst Background = styled.div<{ isMouseOver: boolean; image: string }>`\n  ${diagonalViewStyles(20)};\n\n  background-image: url(${(props: any): { image: string } => props.image});\n  background-position: center;\n  background-size: cover;\n  height: 100vh;\n  left: -200px;\n  min-height: 800px;\n  opacity: ${({ isMouseOver }): number => (isMouseOver ? 0.3 : 1)};\n  position: absolute;\n  transition: opacity 500ms ease-in-out;\n  width: 1028px;\n  z-index: 1;\n\n  @media only screen and (max-width: 1300px) {\n    ${diagonalViewStyles(0)};\n    height: auto;\n    left: 0;\n    max-width: 100%;\n    min-height: 500px;\n    min-width: 600px;\n    opacity: 0.5;\n  }\n`;\n\nconst Content = styled.div`\n  ${diagonalViewStyles(20)};\n  align-items: center;\n  display: flex;\n  flex-direction: column;\n  height: 100vh;\n  justify-content: center;\n  position: absolute;\n  width: 100%;\n  z-index: 2;\n\n  @media only screen and (max-width: 1300px) {\n    ${diagonalViewStyles(0)};\n  }\n`;\n\nconst Title = styled(text3Bold)<{ isMouseOver: boolean }>`\n  ${(props): any => textBehavior(props.isMouseOver)}\n`;\n\nconst Text = styled(text4Light)<{ isMouseOver: boolean }>`\n  ${(props): any => textBehavior(props.isMouseOver)}\n`;\n\nconst Link = styled.a<{ isMouseOver: boolean }>`\n  ${(props): any => textBehavior(props.isMouseOver)}\n`;\n\nconst HeaderPostView: React.FC<HeaderPostViewProps> = ({\n  id,\n  isMouseOver,\n  post,\n}): JSX.Element => {\n  const { image, title, intro, url } = post;\n\n  return (\n    <Container {...{ id, isMouseOver }}>\n      <Content>\n        <Title {...{ isMouseOver }}>{title}</Title>\n        <Text {...{ isMouseOver }}>{intro}</Text>\n        <Link href={url} {...{ isMouseOver }}>\n          See more\n        </Link>\n      </Content>\n      <Background isMouseOver={isMouseOver} image={image} />\n    </Container>\n  );\n};\n\nexport default HeaderPostView;\n","import React, { useEffect } from 'react';\n\nimport { fromEvent } from 'rxjs';\nimport { map } from 'rxjs/operators';\nimport { FromEventTarget } from 'rxjs/internal/observable/fromEvent';\n\nimport HeaderPostView from '../presentations/HeaderPostView';\nimport HeaderPostContainerProps from '../interfaces/HeaderPostContainerProps';\n\nconst HeaderPostContainer: React.FC<HeaderPostContainerProps> = ({\n  index,\n  isMouseOver,\n  mousesOver$,\n  post,\n  setMousesOver$,\n}): JSX.Element => {\n  const id = `post${index}`;\n\n  useEffect(() => {\n    mousesOver$[index] = fromEvent(\n      document.getElementById(id) as FromEventTarget<Event>,\n      'mouseenter'\n    ).pipe(map(() => index));\n    setMousesOver$([...mousesOver$]);\n  }, [id]);\n\n  return <HeaderPostView {...{ id, isMouseOver, post }} />;\n};\n\nexport default HeaderPostContainer;\n","import { useEffect } from 'react';\n\nconst useIntersectionObserver = (\n  id: string,\n  threshold: number[],\n  onIntersect: (entries: any) => void\n): void =>\n  useEffect(() => {\n    const observer = new IntersectionObserver(onIntersect, { threshold });\n    const target = document.getElementById(id) as Element;\n\n    observer.observe(target);\n\n    return (): void => {\n      observer.unobserve(target);\n    };\n  }, [id, threshold, onIntersect]);\n\nexport default useIntersectionObserver;\n","import React from 'react';\nimport styled from 'styled-components';\n\nimport { imageCommonStyles } from 'styles';\n\nimport ContainerViewProps from './interfaces/ContainerViewProps';\nimport LazyImageProps from './interfaces/LazyImageProps';\nimport useLazyImage from './hooks/useLazyImage';\n\nconst Container = styled.div<ContainerViewProps>`\n  ${imageCommonStyles};\n\n  background-image: url(${(props: any): { image: string } => props.image});\n  background-size: cover;\n  background-position: center;\n  opacity: ${(props: any): number =>\n    props.isLoaded && !props.isInViewPort ? 1 : 0.3};\n  transition: opacity 1000ms ease-in-out;\n`;\n\nconst LazyImage: React.FC<LazyImageProps> = ({\n  image,\n  isInViewPort,\n  isLoaded,\n  setIsLoaded,\n}): JSX.Element => {\n  useLazyImage(image, () => setIsLoaded(true));\n\n  return (\n    <Container image={image} isLoaded={isLoaded} isInViewPort={isInViewPort} />\n  );\n};\n\nexport default LazyImage;\n","import { useEffect } from 'react';\n\nexport default (src: string, callback: () => void): void =>\n  useEffect(() => {\n    const img = new Image();\n    img.src = src;\n    img.onload = (): void => callback();\n  }, [src, callback]);\n","import React, { useState } from 'react';\nimport styled from 'styled-components';\n\nimport Colors from 'assets/Colors';\nimport { imageCommonStyles } from 'styles';\n\nimport LazyImage from 'components/LazyImage/LazyImage';\n\nimport TimelineImageProps from './interfaces/TimelineImageProps';\n\nconst Container = styled.div`\n  align-items: center;\n  background-color: ${Colors.BACKGROUND};\n  display: flex;\n  height: 500px;\n  justify-content: center;\n  overflow: hidden;\n  position: relative;\n`;\n\nconst Thumb = styled.div<{ isLoaded: boolean; thumb: string } >`\n  ${imageCommonStyles};\n\n  display: ${(props: any): string =>\n    props.isLoaded ? 'none' : 'block'};\n  background-image: url(${(props: any): { thumb: string } =>  props.thumb});\n  background-size: cover;\n  background-position: center;\n  filter: blur(20px);\n  transition: visibility 500ms ease-in-out;\n  z-index: 2;\n`;\n\nconst TimelineImage: React.FC<TimelineImageProps> = ({\n  id,\n  image,\n  isInViewPort,\n  thumb,\n  children,\n  visible,\n}) => {\n  const [isLoaded, setIsLoaded] = useState(false);\n\n  return (\n    <Container {...{ id }}>\n      {visible && (\n        <LazyImage\n          image={image}\n          isLoaded={isLoaded}\n          setIsLoaded={setIsLoaded}\n          isInViewPort={isInViewPort}\n        />\n      )}\n      <Thumb thumb={thumb} isLoaded={isLoaded} />\n      {children}\n    </Container>\n  );\n};\n\nexport default TimelineImage;\n","import styled from 'styled-components';\nimport React from 'react';\n\nimport { text3Bold } from 'text/text3';\nimport { text4Light } from 'text/text4';\nimport Colors from 'assets/Colors';\n\nimport TimelineImage from '../../TimelineImage/TimelineImage';\nimport TimelinePostViewProps from '../interfaces/TimelinePostViewProps';\n\nconst Content = styled.div<{ visible: boolean }>`\n  max-width: 450px;\n  opacity: 1;\n  position: absolute;\n  text-align: center;\n  z-index: 3;\n`;\n\nconst Title = styled(text3Bold)`\n  padding: 0 10px;\n`;\n\nconst Text = styled(text4Light)`\n  padding: 0 10px;\n`;\n\nconst Link = styled.a`\n  color: ${Colors.TEXT};\n`;\n\nconst TimelinePost: React.FC<TimelinePostViewProps> = ({\n  id,\n  isInViewPort,\n  post,\n  visible,\n}): JSX.Element => {\n  const { image, title, thumb, intro, url } = post;\n\n  return (\n    <TimelineImage {...{ id, image, isInViewPort, thumb, visible }}>\n      <Content {...{ visible }}>\n        <Title>{title}</Title>\n        <Text>{intro}</Text>\n        <Link href={url}>See more</Link>\n      </Content>\n    </TimelineImage>\n  );\n};\n\nexport default TimelinePost;\n","import React, { useState } from 'react';\nimport useIntersectionObserver from '../hooks/useIntersectionObserver';\nimport TimelinePostContainerProps from '../interfaces/TimelinePostContainerProps';\n\nimport TimelinePostView from '../presentations/TimelinePostView';\n\nconst TimelinePostContainer: React.FC<TimelinePostContainerProps> = ({\n  index,\n  post,\n}): JSX.Element => {\n  const [visible, setVisible] = useState(false);\n  const [isInViewPort, setIsInViewPort] = useState(false);\n\n  const id = `timeline-post-${index}`;\n\n  useIntersectionObserver(id, [0.5], (entries) => {\n    if (entries[0].isIntersecting === true) {\n      setIsInViewPort(true);\n      setVisible(true);\n    } else {\n      setIsInViewPort(false);\n    }\n  });\n\n  return <TimelinePostView {...{ id, isInViewPort, post, visible }} />;\n};\n\nexport default TimelinePostContainer;\n","import React from 'react';\nimport styled from 'styled-components';\n\nimport profileConfig from 'config/profile.json';\nimport profileImage from 'assets/imgs/profile.png';\nimport Colors from 'assets/Colors';\n\nimport { text3Bold } from 'text/text3';\nimport { text4Regular } from 'text/text4';\n\nconst Info = styled.div`\n  align-items: center;\n  display: flex;\n  flex-direction: column;\n  flex: 1;\n  justify-content: center;\n`;\n\nconst Profile = styled.div`\n  border-radius: 150px;\n  height: 300px;\n  overflow: hidden;\n  width: 300px;\n\n  @media only screen and (max-width: 350px) {\n    width: 200px;\n    height: 200px;\n  }\n`;\n\nconst ProfileImage = styled.img`\n  height: 300px;\n  width: 300px;\n\n  @media only screen and (max-width: 350px) {\n    width: 200px;\n    height: 200px;\n  }\n`;\n\nconst Name = styled(text3Bold)`\n  line-height: 1;\n  text-align: center;\n`;\n\nconst Text = styled(text4Regular)`\n  line-height: 0;\n  margin: 15px;\n  text-align: center;\n`;\n\nconst Link = styled.a`\n  color: ${Colors.TEXT};\n  text-align: center;\n`;\n\nconst ProfileView = (): JSX.Element => (\n  <Info>\n    <Profile>\n      <ProfileImage src={profileImage} />\n    </Profile>\n    <Name>{profileConfig.name}</Name>\n    <Text>{profileConfig.profession}</Text>\n    <Link href={profileConfig.git}>github</Link>\n    <Link href={profileConfig.medium}>medium</Link>\n    <Link href={profileConfig.company}>@Agriness</Link>\n  </Info>\n);\n\nexport default ProfileView;\n","import React from 'react';\n\nimport ProfileView from '../presentations/ProfileView';\n\nconst ProfileContainer: React.FC = (): JSX.Element => <ProfileView />\n\nexport default ProfileContainer;\n","export default [\n  {\n    'image': `${process.env.PUBLIC_URL}/imgs/post1.jpg`,\n    'intro': 'A service detached from the main thread to execute tasks in background, with the application closed or after a reboot.',\n    'thumb': `${process.env.PUBLIC_URL}/imgs/post1-thumb.jpg`,\n    'title': 'How to create an unstoppable service in React Native using Headless JS',\n    'url': 'https://medium.com/reactbrasil/how-to-create-an-unstoppable-service-in-react-native-using-headless-js-93656b6fd5d1'\n  },\n  {\n    'image': `${process.env.PUBLIC_URL}/imgs/post2.jpg`,\n    'intro': 'How to create a web page to bring together all the components of your React Native project and share them with your workmates',\n    'thumb': `${process.env.PUBLIC_URL}/imgs/post2-thumb.jpg`,\n    'title': 'Create a simple react native library with Storybook and Loki',\n    'url': 'https://medium.com/reactbrasil/create-an-simple-react-native-library-with-storybook-and-loki-aa7c9d656925'\n  },\n  {\n    'image': `${process.env.PUBLIC_URL}/imgs/post3.jpg`,\n    'intro': 'A custom hook that can be used in every basic animation in your React Native project.',\n    'thumb': `${process.env.PUBLIC_URL}/imgs/post3-thumb.jpg`,\n    'title': 'Custom animation hook in React Native',\n    'url': 'https://medium.com/reactbrasil/custom-animation-hook-in-react-native-aad1e4fff807'\n  },\n  {\n    'image': `${process.env.PUBLIC_URL}/imgs/post4.jpg`,\n    'intro': 'Bring all your configs together in a monorepo and reuse them through all your projects.',\n    'thumb': `${process.env.PUBLIC_URL}/imgs/post4.jpg`,\n    'title': 'Reuse your eslint/prettier config in a monorepo with Lerna',\n    'url': 'https://medium.com/@mathiassilva4/reuse-your-eslint-prettier-config-in-a-monorepo-with-lerna-54c1800cacdc'\n  }\n]\n","import React from 'react';\nimport styled from 'styled-components';\n\nimport { Observable } from 'rxjs';\n\nimport { diagonalViewStyles } from 'styles';\n\nimport { HeaderPost } from 'components/HeaderPost';\nimport { TimelinePost } from 'components/TimelinePost';\nimport { Profile } from 'components/Profile';\n\nimport posts from 'config/posts';\n\ninterface AppViewProps {\n  itemUnderMouse: number | undefined;\n  mousesOver$: Observable<any>[];\n  setMousesOver$: ($: Observable<any>[]) => void;\n}\n\nconst Header = styled.div`\n  background-color: black;\n  display: grid;\n  height: 80vh;\n  overflow: hidden;\n  padding: 0;\n\n  @media (min-width: 1300px) {\n    grid-template-columns: 1fr 3fr;\n    height: 100vh;\n  }\n`;\n\nconst HeaderPosts = styled.div`\n  display: flex;\n  justify-content: flex-end;\n  overflow: hidden;\n  padding-left: 100px;\n  position: relative;\n\n  ${diagonalViewStyles(-20)};\n  @media only screen and (max-width: 1300px) {\n    display: none;\n  }\n`;\n\nconst TimelinePosts = styled.div`\n  display: none;\n  @media only screen and (max-width: 1300px) {\n    display: block;\n  }\n`;\n\n\nconst AppView = (props: AppViewProps): JSX.Element => {\n  const { itemUnderMouse, mousesOver$, setMousesOver$ } = props;\n\n  return (\n    <>\n      <Header>\n        <Profile />\n        <HeaderPosts id=\"posts\">\n          {posts.map((post, index) => (\n            <HeaderPost\n              isMouseOver={itemUnderMouse === index}\n              key={index.toString()}\n              {...{ index, mousesOver$, post, setMousesOver$ }}\n            />\n          ))}\n        </HeaderPosts>\n      </Header>\n      <TimelinePosts>\n        {posts.map((post, index) => (\n          <TimelinePost key={index.toString()} {...{ index, post }} />\n        ))}\n      </TimelinePosts>\n    </>\n  );\n};\n\nexport default AppView;\n","import React, { useEffect, useState } from 'react';\n\nimport { Observable, fromEvent, merge } from 'rxjs';\nimport { debounceTime, map } from 'rxjs/operators';\nimport { FromEventTarget } from 'rxjs/internal/observable/fromEvent';\n\nimport AppView from '../presentations/AppView';\n\nconst AppContainer = (): JSX.Element => {\n  const [mousesOver$, setMousesOver$] = useState([] as Observable<any>[]);\n  const [itemUnderMouse, setItemUnderMouse] = useState(undefined);\n\n  useEffect(() => {\n    const posts$ = fromEvent(\n      document.getElementById('posts') as FromEventTarget<Event>,\n      'mouseleave'\n    ).pipe(map(() => undefined));\n\n    const merge$ = merge(...mousesOver$, posts$)\n      .pipe(debounceTime(200))\n      .subscribe((index) => setItemUnderMouse(index));\n\n    return (): void => {\n      merge$.unsubscribe();\n    };\n  }, [mousesOver$]);\n\n  return <AppView {...{ itemUnderMouse, mousesOver$, setMousesOver$ }} />;\n};\n\nexport default AppContainer;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport { App } from './components/App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}