{"version":3,"sources":["assets/imgs/profile.png","helpers/diagonalViewStyles.ts","helpers/textBehavior.ts","text/text3/text3Regular.tsx","text/text3/text3Light.tsx","text/text3/text3Bold.tsx","text/text4/text4Regular.tsx","text/text4/text4Bold.tsx","text/text4/text4Light.tsx","components/HeaderPost/presentations/HeaderPostView.tsx","components/HeaderPost/containers/HeaderPostContainer.tsx","components/TimelinePost/presentations/TimelinePostView.tsx","components/TimelinePost/containers/TimelinePostContainer.tsx","components/Profile/presentations/ProfileView.tsx","components/Profile/containers/ProfileContainer.tsx","config/posts.js","components/App/presentations/AppView.tsx","components/App/containers/AppContainer.tsx","serviceWorker.ts","index.tsx"],"names":["module","exports","degrees","css","isMouseOver","styled","p","h1","Container","div","Background","img","diagonalViewStyles","Content","Title","text3Bold","props","textBehavior","Text","text4Light","Link","a","HeaderPostView","id","post","image","title","intro","url","href","src","HeaderPostContainer","index","mousesOver$","setMousesOver$","useEffect","fromEvent","document","getElementById","pipe","map","visible","TimelinePost","TimelinePostContainer","useState","setVisible","IntersectionObserver","entries","isIntersecting","threshold","observe","TimelinePostView","Info","Profile","ProfileImage","Name","text4Regular","ProfileView","profileImage","profileConfig","name","profession","git","medium","company","ProfileContainer","process","Header","HeaderPosts","TimelinePosts","AppView","itemUnderMouse","posts","key","toString","AppContainer","undefined","setItemUnderMouse","posts$","merge$","merge","debounceTime","subscribe","unsubscribe","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"uTAAAA,EAAOC,QAAU,IAA0B,qC,2bCG5B,qBAACC,EAAD,uDAAW,EAAX,OAAsBC,YAArB,IACaD,EACHA,EACDA,EACDA,EACHA,I,2LCLN,qBAACE,EAAD,+DAA8BD,YAA7B,IAEHC,EAAc,EAAI,I,+PCHhBC,IAAOC,EAAtB,K,2PCAeD,IAAOE,GAAtB,K,0PCAeF,UAAOE,GAAtB,K,4PCAeF,UAAOC,EAAtB,K,yPCAeD,IAAOC,EAAtB,K,0PCAeD,UAAOC,EAAtB,K,uqCCkBA,IAAME,EAAYH,IAAOI,IAAV,KACL,qBAAGL,YAAyC,GAAM,OAOtDM,EAAaL,IAAOM,IAAV,IACZC,EAAmB,KAIV,qBAAGR,YAAyC,GAAM,IAOzDQ,EAAmB,IAUnBC,EAAUR,IAAOI,IAAV,IACTG,EAAmB,IAWjBA,EAAmB,IAInBE,EAAQT,YAAOU,EAAPV,CAAH,KACP,SAACW,GAAD,OAAgBC,EAAaD,EAAMZ,gBAGjCc,EAAOb,YAAOc,EAAPd,CAAH,KACN,SAACW,GAAD,OAAgBC,EAAaD,EAAMZ,gBAGjCgB,EAAOf,IAAOgB,EAAV,KACN,SAACL,GAAD,OAAgBC,EAAaD,EAAMZ,gBAmBxBkB,EAhBQ,SAACN,GAAyC,IACvDO,EAA0BP,EAA1BO,GAAInB,EAAsBY,EAAtBZ,YAAaoB,EAASR,EAATQ,KACjBC,EAA6BD,EAA7BC,MAAOC,EAAsBF,EAAtBE,MAAOC,EAAeH,EAAfG,MAAOC,EAAQJ,EAARI,IAE7B,OACE,kBAACpB,EAAc,CAAEe,KAAInB,eACnB,kBAACS,EAAD,KACE,kBAACC,EAAU,CAAEV,eAAgBsB,GAC7B,kBAACR,EAAS,CAAEd,eAAgBuB,GAC5B,kBAACP,EAAD,eAAMS,KAAMD,GAAS,CAAExB,gBAAvB,aAEF,kBAACM,EAAD,CAAYN,YAAaA,EAAa0B,IAAKL,MCpDlCM,EAhBa,SAACf,GAAkD,IACrEgB,EAA0DhB,EAA1DgB,MAAO5B,EAAmDY,EAAnDZ,YAAa6B,EAAsCjB,EAAtCiB,YAAaT,EAAyBR,EAAzBQ,KAAMU,EAAmBlB,EAAnBkB,eAEzCX,EAAE,cAAUS,GAUlB,OARAG,qBAAU,WACRF,EAAYD,GAASI,YACnBC,SAASC,eAAef,GACxB,cACAgB,KAAKC,aAAI,kBAAMR,MACjBE,EAAe,YAAID,MAClB,CAACV,IAEG,kBAAC,EAAmB,CAAEA,KAAInB,cAAaoB,U,w+BCjBhD,IAAMhB,EAAYH,IAAOI,IAAV,KAUa,SAACO,GAAD,OAAmCA,EAAMS,SAQtD,SAACT,GAAD,OAAwBA,EAAMyB,QAAU,GAAM,KAKvD5B,EAAUR,IAAOI,IAAV,KAIA,SAACO,GAAD,OAAwBA,EAAMyB,QAAU,EAAI,KAInD3B,EAAQT,YAAOU,EAAPV,CAAH,KAKLa,EAAOb,YAAOc,EAAPd,CAAH,KAKJe,EAAOf,IAAOgB,EAAV,KAmBKqB,EAfM,SAAC1B,GAA+C,IAC3DO,EAAsBP,EAAtBO,GAAIC,EAAkBR,EAAlBQ,KAAMiB,EAAYzB,EAAZyB,QACVhB,EAA6BD,EAA7BC,MAAOC,EAAsBF,EAAtBE,MAAOC,EAAeH,EAAfG,MAAOC,EAAQJ,EAARI,IAE7B,OACE,kBAAC,EAAc,CAACL,KAAIE,QAAOgB,WACzB,kBAAC,EAAY,CAAEA,WACb,kBAAC,EAAD,KAAQf,GACR,kBAAC,EAAD,KAAOC,GACP,kBAAC,EAAD,CAAME,KAAMD,GAAZ,eClCOe,EAvBe,SAAC3B,GAAoD,IACzEgB,EAAgBhB,EAAhBgB,MAAOR,EAASR,EAATQ,KADiE,EAGlDoB,oBAAS,GAHyC,mBAGzEH,EAHyE,KAGhEI,EAHgE,KAK1EtB,EAAE,wBAAoBS,GAa5B,OAXAG,qBAAU,WACS,IAAIW,sBAAqB,SAACC,IACR,IAA9BA,EAAQ,GAAGC,eACZH,GAAW,GAEXA,GAAW,KAEZ,CAAEI,UAAW,CAAC,MACRC,QAAQb,SAASC,eAAef,MACxC,IAGD,kBAAC4B,EAAqB,CAAE5B,KAAIC,OAAMiB,a,6hCCxBtC,IAAMW,GAAO/C,IAAOI,IAAV,MAQJ4C,GAAUhD,IAAOI,IAAV,MAYP6C,GAAejD,IAAOM,IAAV,MAUZ4C,GAAOlD,YAAOU,EAAPV,CAAH,MAMJa,GAAOb,YAAOmD,EAAPnD,CAAH,MAOJe,GAAOf,IAAOgB,EAAV,MAkBKoC,GAbK,kBAClB,kBAACL,GAAD,KACE,kBAACC,GAAD,KACE,kBAACC,GAAD,CAAcxB,IAAK4B,QAErB,kBAACH,GAAD,KAAOI,GAAcC,MACrB,kBAAC,GAAD,KAAOD,GAAcE,YACrB,kBAAC,GAAD,CAAMhC,KAAM8B,GAAcG,KAA1B,UACA,kBAAC,GAAD,CAAMjC,KAAM8B,GAAcI,QAA1B,UACA,kBAAC,GAAD,CAAMlC,KAAM8B,GAAcK,SAA1B,eC5DWC,GAFU,kBAAmB,kBAAC,GAAD,OCJ7B,IACb,CACE,MAAQ,GAAR,OAAYC,QAAZ,mBACA,MAAS,yHACT,MAAS,yEACT,IAAO,sHAET,CACE,MAAQ,GAAR,OAAYA,QAAZ,mBACA,MAAS,gIACT,MAAS,+DACT,IAAO,6GAET,CACE,MAAQ,GAAR,OAAYA,QAAZ,mBACA,MAAS,wFACT,MAAS,wCACT,IAAO,qFAET,CACE,MAAQ,GAAR,OAAYA,QAAZ,mBACA,MAAS,0FACT,MAAS,6DACT,IAAO,K,isBCJX,IAAMC,GAAS9D,IAAOI,IAAV,MAaN2D,GAAc/D,IAAOI,IAAV,KAObG,GAAoB,KAMlByD,GAAgBhE,IAAOI,IAAV,MAkCJ6D,GA1BC,SAACtD,GAAsC,IAC7CuD,EAAgDvD,EAAhDuD,eAAgBtC,EAAgCjB,EAAhCiB,YAAaC,EAAmBlB,EAAnBkB,eAErC,OACE,oCACE,kBAACiC,GAAD,KACE,kBAAC,GAAD,MACA,kBAACC,GAAD,CAAa7C,GAAG,SACbiD,GAAMhC,KAAI,SAAChB,EAAMQ,GAAP,OACT,kBAAC,EAAD,eACE5B,YAAamE,IAAmBvC,EAChCyC,IAAKzC,EAAM0C,YACP,CAAE1C,QAAOC,cAAaT,OAAMU,yBAKxC,kBAACmC,GAAD,KACGG,GAAMhC,KAAI,SAAChB,EAAMQ,GAAP,OACT,kBAAC,EAAD,eAAcyC,IAAKzC,EAAM0C,YAAgB,CAAE1C,QAAOR,gBC1C7CmD,GAtBM,WAAoB,IAAD,EACA/B,mBAAS,IADT,mBAC/BX,EAD+B,KAClBC,EADkB,OAEMU,wBAASgC,GAFf,mBAE/BL,EAF+B,KAEfM,EAFe,KAmBtC,OAfA1C,qBAAU,WACR,IAAM2C,EAAS1C,YACbC,SAASC,eAAe,SACxB,cACAC,KAAKC,aAAI,gBAELuC,EAASC,IAAK,WAAL,cAAS/C,GAAT,QAAsB6C,KAClCvC,KAAK0C,YAAa,MAClBC,WAAU,SAAClD,GAAD,OAAW6C,EAAkB7C,MAE1C,OAAO,WACL+C,EAAOI,iBAER,CAAClD,IAEG,kBAAC,GAAY,CAAEsC,iBAAgBtC,cAAaC,oBCfjCkD,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,GAAD,OAEFtD,SAASC,eAAe,SDiIpB,kBAAmBsD,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.dfd1a669.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/profile.8323afe7.png\";","/* eslint-disable @typescript-eslint/no-explicit-any */\nimport { css } from 'styled-components';\n\nexport default (degrees = 0): any => css`\n  -webkit-transform: skewX(${degrees}deg);\n  -moz-transform: skewX(${degrees}deg);\t\n  -ms-transform: skewX(${degrees}deg);\t\n  -o-transform: skewX(${degrees}deg);\n  transform: skewX(${degrees}deg);\n`","/* eslint-disable @typescript-eslint/no-explicit-any */\nimport { css } from 'styled-components';\n\nexport default (isMouseOver = false): any => css`\n  color: white;\n  opacity: ${isMouseOver ? 1 : 0};\n  text-align: center;\n  transition: opacity 500ms ease-in-out;\n  width: 250px;\n`","import styled from 'styled-components';\n\nexport default styled.p`\n  font-family: \"TitilliumWeb-Regular\";\n  font-size: 1.3rem;\n  letter-spacing: 0;\n  line-height: 1.5;\n\n\n  @media only screen and (max-width: 1500px) {\n    font-size: 1rem;\n  }\n`;\n","import styled from 'styled-components';\n\nexport default styled.h1`\n  font-family: \"TitilliumWeb-Light\";\n  font-size: 1.2rem;\n  letter-spacing: 0;\n  line-height: 1.5;\n\n  @media only screen and (max-width: 1500px) {\n    font-size: 1rem;\n  }\n`;\n","import styled from 'styled-components';\n\nexport default styled.h1`\n  font-family: \"TitilliumWeb-Bold\";\n  font-size: 1.2rem;\n  letter-spacing: 0;\n  line-height: 1.5;\n\n  @media only screen and (max-width: 1500px) {\n    font-size: 1rem;\n  }\n`;\n","import styled from 'styled-components';\n\nexport default styled.p`\n  font-family: \"TitilliumWeb-Regular\";\n  font-size: 1rem;\n  letter-spacing: 0;\n  line-height: 1.5;\n\n  @media only screen and (max-width: 600px) {\n    font-size: 0.9rem;\n  }\n`;\n","import styled from 'styled-components';\n\nexport default styled.p`\n  font-family: \"TitilliumWeb-Bold\";\n  font-size: 1rem;\n  letter-spacing: 0;\n  line-height: 1.5;\n\n  @media only screen and (max-width: 600px) {\n    font-size: 0.9rem;\n  }\n`;\n","import styled from 'styled-components';\n\nexport default styled.p`\n  font-family: \"TitilliumWeb-Light\";\n  font-size: 1rem;\n  letter-spacing: 0;\n  line-height: 1.5;\n\n  @media only screen and (max-width: 600px) {\n    font-size: 0.9rem;\n  }\n`;","import React from 'react';\nimport styled from 'styled-components';\n\nimport diagonalViewStyles from 'helpers/diagonalViewStyles';\nimport textBehavior from 'helpers/textBehavior';\n\nimport { text3Bold } from 'text/text3';\nimport { text4Light } from 'text/text4';\n\ninterface HeaderPostProps {\n  id: string;\n  post: {\n    image: string;\n    title: string;\n    intro: string;\n    url: string;\n  };\n  isMouseOver: boolean;\n}\n\nconst Container = styled.div<{ isMouseOver: boolean }>`\n  flex: ${({ isMouseOver }): number => (isMouseOver ? 0.6 : 0.25)};\n  overflow: hidden;\n  position: relative;\n  transition-property: flex;\n  transition: all 500ms ease-in-out;\n`;\n\nconst Background = styled.img<{ isMouseOver: boolean }>`\n  ${diagonalViewStyles(20)};\n  height: 100vh;\n  left: -100%;\n  min-height: 800px;\n  opacity: ${({ isMouseOver }): number => (isMouseOver ? 0.3 : 1)};\n  position: absolute;\n  transition-property: opacity;\n  transition: all 500ms ease-in-out;\n  z-index: 1;\n\n  @media only screen and (max-width: 1300px) {\n    ${diagonalViewStyles(0)};\n    height: auto;\n    left: 0;\n    max-width: 100%;\n    min-height: 500px;\n    min-width: 600px;\n    opacity: 0.5;\n  }\n`;\n\nconst Content = styled.div`\n  ${diagonalViewStyles(20)};\n  align-items: center;\n  display: flex;\n  flex-direction: column;\n  height: 100vh;\n  justify-content: center;\n  position: absolute;\n  width: 100%;\n  z-index: 2;\n\n  @media only screen and (max-width: 1300px) {\n    ${diagonalViewStyles(0)};\n  }\n`;\n\nconst Title = styled(text3Bold)<{ isMouseOver: boolean }>`\n  ${(props): any => textBehavior(props.isMouseOver)}\n`;\n\nconst Text = styled(text4Light)<{ isMouseOver: boolean }>`\n  ${(props): any => textBehavior(props.isMouseOver)}\n`;\n\nconst Link = styled.a<{ isMouseOver: boolean }>`\n  ${(props): any => textBehavior(props.isMouseOver)}\n`;\n\nconst HeaderPostView = (props: HeaderPostProps): JSX.Element => {\n  const { id, isMouseOver, post } = props;\n  const { image, title, intro, url } = post;\n\n  return (\n    <Container {...{ id, isMouseOver }}>\n      <Content>\n        <Title {...{ isMouseOver }}>{title}</Title>\n        <Text {...{ isMouseOver }}>{intro}</Text>\n        <Link href={url} {...{ isMouseOver }}>See more</Link>\n      </Content>\n      <Background isMouseOver={isMouseOver} src={image} />\n    </Container>\n  );\n};\n\nexport default HeaderPostView;\n","import React, { useEffect } from 'react';\n\nimport { Observable, fromEvent } from 'rxjs';\nimport { map } from 'rxjs/operators';\nimport { FromEventTarget } from 'rxjs/internal/observable/fromEvent';\n\nimport HeaderPostView from '../presentations/HeaderPostView';\n\ninterface HeaderPostContainerProps {\n  index: number;\n  post: {\n    image: string;\n    title: string;\n    intro: string;\n    url: string;\n  };\n  isMouseOver: boolean;\n  mousesOver$: Observable<any>[];\n  setMousesOver$: ($: Observable<any>[]) => void;\n}\n\nconst HeaderPostContainer = (props: HeaderPostContainerProps): JSX.Element => {\n  const { index, isMouseOver, mousesOver$, post, setMousesOver$ } = props;\n\n  const id = `post${index}`;\n\n  useEffect(() => {\n    mousesOver$[index] = fromEvent(\n      document.getElementById(id) as FromEventTarget<Event>,\n      'mouseenter',\n    ).pipe(map(() => index));\n    setMousesOver$([...mousesOver$]);\n  }, [id]);\n\n  return <HeaderPostView {...{ id, isMouseOver, post }}/>\n}\n\nexport default HeaderPostContainer;","import React from 'react';\nimport styled from 'styled-components';\n\nimport { text3Bold } from 'text/text3';\nimport { text4Light } from 'text/text4';\n\ninterface TimelinePostViewProps {\n  id: string;\n  post: {\n    image: string;\n    title: string;\n    intro: string;\n    url: string;\n  };\n  visible: boolean;\n}\n\nconst Container = styled.div<{ image: string; visible: boolean }>`\n  height: 500px;\n  position: relative;\n  background-color: black;\n  display: flex;\n  justify-content: center;\n  align-items: center;\n\n  &:before {\n    content: '';\n    background-image: url(${(props: any): { image: string } => props.image});\n    background-size: cover;\n    background-position: center;\n    position: absolute;\n    top: 0px;\n    right: 0px;\n    bottom: 0px;\n    left: 0px;\n    opacity: ${(props: any): number => props.visible ? 0.3 : 1};\n    transition: opacity 500ms ease-in-out;\n  }\n`;\n\nconst Content = styled.div<{ visible: boolean }>`\n  max-width: 450px;\n  text-align: center;\n  position: absolute;\n  opacity: ${(props: any): number => props.visible ? 1 : 0};\n  transition: opacity 500ms ease-in-out;\n`;\n\nconst Title = styled(text3Bold)`\n  color: white;\n  padding: 0 10px;\n`;\n\nconst Text = styled(text4Light)`\n  color: white;\n  padding: 0 10px;\n`;\n\nconst Link = styled.a`\n  color: white;\n`;\n\nconst TimelinePost = (props: TimelinePostViewProps): JSX.Element => {\n  const { id, post, visible } = props;\n  const { image, title, intro, url } = post;\n\n  return (\n    <Container {...{id, image, visible }}>\n      <Content {...{ visible }}>\n        <Title>{title}</Title>\n        <Text>{intro}</Text>\n        <Link href={url}>See more</Link>\n      </Content>\n    </Container>\n  )\n}\n\nexport default TimelinePost;","import React, { useEffect, useState } from 'react';\n\nimport TimelinePostView from '../presentations/TimelinePostView';\n\ninterface TimelinePostContainerProps {\n  index: number;\n  post: {\n    image: string;\n    title: string;\n    intro: string;\n    url: string;\n  };\n}\n\nconst TimelinePostContainer = (props: TimelinePostContainerProps): JSX.Element => {\n  const { index, post } = props;\n\n  const [visible, setVisible] = useState(false);\n\n  const id = `timeline-post-${index}`;\n\n  useEffect(() => {\n    const observer = new IntersectionObserver((entries) => {\n      if(entries[0].isIntersecting === true) {\n        setVisible(true);\n      } else{\n        setVisible(false);\n      }\n    }, { threshold: [0.5] });\n    observer.observe(document.getElementById(id) as Element);\n  }, [])\n  \n  return (\n    <TimelinePostView {...{ id, post, visible }}/>\n  )\n}\n\nexport default TimelinePostContainer;","import React from 'react';\nimport styled from 'styled-components';\n\nimport profileConfig from 'config/profile.json';\nimport profileImage from 'assets/imgs/profile.png';\n\nimport { text3Bold } from 'text/text3';\nimport { text4Regular } from 'text/text4';\n\nconst Info = styled.div`\n  display: flex;\n  flex: 1;\n  flex-direction: column;\n  justify-content: center;\n  align-items: center;\n`;\n\nconst Profile = styled.div`\n  width: 300px;\n  height: 300px;\n  border-radius: 150px;\n  overflow: hidden;\n\n  @media only screen and (max-width: 350px) {\n    width: 200px;\n    height: 200px;\n  }\n`;\n\nconst ProfileImage = styled.img`\n  width: 300px;\n  height: 300px;\n\n  @media only screen and (max-width: 350px) {\n    width: 200px;\n    height: 200px;\n  }\n`;\n\nconst Name = styled(text3Bold)`\n  color: white;\n  text-align: center;\n  line-height: 1;\n`;\n\nconst Text = styled(text4Regular)`\n  color: white;\n  text-align: center;\n  line-height: 0;\n  margin: 15px;\n`;\n\nconst Link = styled.a`\n  color: white;\n  text-align: center;\n`;\n\nconst ProfileView = (): JSX.Element => (\n  <Info>\n    <Profile>\n      <ProfileImage src={profileImage} />\n    </Profile>\n    <Name>{profileConfig.name}</Name>\n    <Text>{profileConfig.profession}</Text>\n    <Link href={profileConfig.git}>github</Link>\n    <Link href={profileConfig.medium}>medium</Link>\n    <Link href={profileConfig.company}>@Agriness</Link>\n  </Info>\n);\n\nexport default ProfileView;\n","import React from 'react';\n\nimport ProfileView from '../presentations/ProfileView';\n\nconst ProfileContainer = (): JSX.Element => <ProfileView />\n\nexport default ProfileContainer;\n","export default [\n  {\n    'image': `${process.env.PUBLIC_URL}/imgs/post1.jpg`,\n    'intro': 'A service detached from the main thread to execute tasks in background, with the application closed or after a reboot.',\n    'title': 'How to create an unstoppable service in React Native using Headless JS',\n    'url': 'https://medium.com/reactbrasil/how-to-create-an-unstoppable-service-in-react-native-using-headless-js-93656b6fd5d1'\n  },\n  {\n    'image': `${process.env.PUBLIC_URL}/imgs/post2.jpg`,\n    'intro': 'How to create a web page to bring together all the components of your React Native project and share them with your workmates',\n    'title': 'Create a simple react native library with Storybook and Loki',\n    'url': 'https://medium.com/reactbrasil/create-an-simple-react-native-library-with-storybook-and-loki-aa7c9d656925'\n  },\n  {\n    'image': `${process.env.PUBLIC_URL}/imgs/post3.jpg`,\n    'intro': 'A custom hook that can be used in every basic animation in your React Native project.',\n    'title': 'Custom animation hook in React Native',\n    'url': 'https://medium.com/reactbrasil/custom-animation-hook-in-react-native-aad1e4fff807'\n  },\n  {\n    'image': `${process.env.PUBLIC_URL}/imgs/post4.jpg`,\n    'intro': 'Bring all your configs together in a monorepo and reuse them through all your projects.',\n    'title': 'Reuse your eslint/prettier config in a monorepo with Lerna',\n    'url': ''\n  }\n]\n","import React from 'react';\nimport styled from 'styled-components';\n\nimport { Observable } from 'rxjs';\n\nimport diagonalViewStyles from 'helpers/diagonalViewStyles';\n\nimport { HeaderPost } from 'components/HeaderPost';\nimport { TimelinePost } from 'components/TimelinePost';\nimport { Profile } from 'components/Profile';\n\nimport posts from 'config/posts';\n\ninterface AppViewProps {\n  itemUnderMouse: number | undefined;\n  mousesOver$: Observable<any>[];\n  setMousesOver$: ($: Observable<any>[]) => void;\n}\n\nconst Header = styled.div`\n  height: 80vh;\n  background-color: black;\n  display: grid;\n  overflow: hidden;\n  padding: 0;\n\n  @media (min-width: 1300px) {\n    grid-template-columns: 1fr 3fr;\n    height: 100vh;\n  }\n`;\n\nconst HeaderPosts = styled.div`\n  display: flex;\n  justify-content: flex-end;\n  overflow: hidden;\n  position: relative;\n  padding-left: 100px;\n\n  ${diagonalViewStyles(-20)};\n  @media only screen and (max-width: 1300px) {\n    display: none;\n  }\n`;\n\nconst TimelinePosts = styled.div`\n  display: none;\n  @media only screen and (max-width: 1300px) {\n    display: block;\n  }\n`;\n\n\nconst AppView = (props: AppViewProps): JSX.Element => {\n  const { itemUnderMouse, mousesOver$, setMousesOver$ } = props;\n\n  return (\n    <>\n      <Header>\n        <Profile />\n        <HeaderPosts id=\"posts\">\n          {posts.map((post, index) => (\n            <HeaderPost\n              isMouseOver={itemUnderMouse === index}\n              key={index.toString()}\n              {...{ index, mousesOver$, post, setMousesOver$ }}\n            />\n          ))}\n        </HeaderPosts>\n      </Header>\n      <TimelinePosts>\n        {posts.map((post, index) => (\n          <TimelinePost key={index.toString()} {...{ index, post }} />\n        ))}\n      </TimelinePosts>\n    </>\n  );\n};\n\nexport default AppView;\n","import React, { useEffect, useState } from 'react';\n\nimport { Observable, fromEvent, merge } from 'rxjs';\nimport { debounceTime, map } from 'rxjs/operators';\nimport { FromEventTarget } from 'rxjs/internal/observable/fromEvent';\n\nimport AppView from '../presentations/AppView';\n\nconst AppContainer = (): JSX.Element => {\n  const [mousesOver$, setMousesOver$] = useState([] as Observable<any>[]);\n  const [itemUnderMouse, setItemUnderMouse] = useState(undefined);\n\n  useEffect(() => {\n    const posts$ = fromEvent(\n      document.getElementById('posts') as FromEventTarget<Event>,\n      'mouseleave'\n    ).pipe(map(() => undefined));\n\n    const merge$ = merge(...mousesOver$, posts$)\n      .pipe(debounceTime(200))\n      .subscribe((index) => setItemUnderMouse(index));\n\n    return (): void => {\n      merge$.unsubscribe();\n    };\n  }, [mousesOver$]);\n\n  return <AppView {...{ itemUnderMouse, mousesOver$, setMousesOver$ }} />;\n};\n\nexport default AppContainer;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport { App } from './components/App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}